-- ========= CRIAÇÃO DAS TABELAS =========

CREATE TABLE enderecos (
    id SERIAL PRIMARY KEY,
    cep VARCHAR(9) NOT NULL,
    logradouro VARCHAR(100) NOT NULL,
    numero VARCHAR(10) NOT NULL,
    complemento VARCHAR(50),
    bairro VARCHAR(50) NOT NULL,
    cidade VARCHAR(50) NOT NULL,
    estado CHAR(2) NOT NULL,
    pais VARCHAR(30) DEFAULT 'Brasil'
);

CREATE TABLE marcas (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(80) UNIQUE NOT NULL
);

CREATE TABLE modelos (
    id SERIAL PRIMARY KEY,
    marca_id INTEGER NOT NULL REFERENCES marcas(id) ON UPDATE CASCADE ON DELETE RESTRICT,
    nome VARCHAR(80) NOT NULL,
    UNIQUE(marca_id, nome)
);

CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(80) NOT NULL,
    dt_nascimento DATE NOT NULL CHECK (dt_nascimento <= CURRENT_DATE - INTERVAL '18 years'),
    cpf VARCHAR(14) UNIQUE NOT NULL CHECK (cpf ~ '^\d{3}\.\d{3}\.\d{3}-\d{2}$'),
    endereco_id INTEGER REFERENCES enderecos(id) ON DELETE SET NULL,
    telefone VARCHAR(15) NULL,
    email VARCHAR(100) UNIQUE NOT NULL CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]+$'),
    senha VARCHAR(100) NOT NULL CHECK (LENGTH(senha) >= 8),
    criado TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    atualizado TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE carros (
    id SERIAL PRIMARY KEY,
    modelo_id INTEGER NOT NULL REFERENCES modelos(id) ON UPDATE CASCADE ON DELETE RESTRICT,
    ano_fabricacao INTEGER NOT NULL CHECK (ano_fabricacao BETWEEN 1886 AND EXTRACT(YEAR FROM CURRENT_DATE) + 1),
    ano_modelo INTEGER NOT NULL CHECK (ano_modelo >= ano_fabricacao),
    quilometragem DOUBLE PRECISION CHECK (quilometragem >= 0),
    cor VARCHAR(50) NOT NULL,
    automatico BOOLEAN NOT NULL DEFAULT FALSE,
    preco NUMERIC(10, 2) NOT NULL CHECK (preco > 0),
    criado TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    atualizado TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP -- Coluna renomeada para padronização
);

-- ========= CRIAÇÃO DOS ÍNDICES ESSENCIAIS =========

-- Índices para colunas frequentemente usadas em filtros e junções
CREATE INDEX idx_carros_preco          ON carros(preco);
CREATE INDEX idx_carros_ano_fabricacao ON carros(ano_fabricacao);

-- Índices em chaves estrangeiras para otimizar JOINs
CREATE INDEX idx_carros_modelo_id      ON carros(modelo_id);
CREATE INDEX idx_modelos_marca_id      ON modelos(marca_id);

-- OBS: Índices para usuarios.email e usuarios.cpf são criados automaticamente pela constraint UNIQUE.

-- ========= FUNÇÃO E TRIGGERS PARA ATUALIZAÇÃO AUTOMÁTICA DE TIMESTAMP =========

CREATE OR REPLACE FUNCTION atualiza_timestamp_atualizado()
RETURNS TRIGGER AS $$
BEGIN
   NEW.atualizado = CURRENT_TIMESTAMP;
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_usuarios_atualizado
BEFORE UPDATE ON usuarios
FOR EACH ROW
EXECUTE FUNCTION atualiza_timestamp_atualizado();

CREATE TRIGGER trg_carros_atualizado
BEFORE UPDATE ON carros
FOR EACH ROW
EXECUTE FUNCTION atualiza_timestamp_atualizado();

-- ========= CRIAÇÃO DA VIEW DE CARROS DISPONÍVEIS =========

CREATE OR REPLACE VIEW vw_carros_disponiveis AS
SELECT
    c.id,
    m.nome AS marca,
    md.nome AS modelo,
    c.ano_fabricacao,
    c.ano_modelo,
    c.quilometragem,
    c.cor,
    c.automatico,
    c.preco
FROM
    carros c
JOIN
    modelos md ON c.modelo_id = md.id
JOIN
    marcas m ON md.marca_id = m.id;