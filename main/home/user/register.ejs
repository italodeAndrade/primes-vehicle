<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <style>
        /* Seu CSS mantido intacto */
        #navbar { position: sticky; top: 0; z-index: 1000; }
        body { margin: 0; font-family: Arial, sans-serif; background-color: #3a3a4a; color: #fff; }
        #register { display: flex; flex-direction: column; align-items: center; min-height: 100vh; padding: 40px 20px; }
        #register h1 { color: #fff; text-align: center; margin-bottom: 30px; font-size: 2em; }
        #form_user { background: #1e1e2a; padding: 40px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); width: 100%; max-width: 500px; display: flex; flex-direction: column; gap: 15px; }
        #form_user input { width: 100%; background: #2d2d3a; border: 1px solid #3a3a4a; color: #fff; padding: 12px 15px; border-radius: 4px; font-size: 16px; box-sizing: border-box; transition: border-color 0.3s; }
        #form_user input:focus { outline: none; border-color: #bd2a65; }
        .file-input-container { position: relative; margin-bottom: 5px; }
        #photo_user { opacity: 0; position: absolute; width: 100%; height: 100%; left: 0; top: 0; cursor: pointer; }
        .file-input-label { display: block; padding: 12px 15px; background: #bd2a65; color: white; border-radius: 4px; text-align: center; cursor: pointer; transition: background 0.3s; }
        .file-input-label:hover { background: #7e1d44; }
        #form_user button { background: #bd2a65; color: #fff; cursor: pointer; transition: 0.3s background; border-radius: 4px; font-size: 16px; padding: 12px; border: 0; margin-top: 10px; width: 100%; }
        #form_user button:hover { background: #7e1d44; }
        #form_user a { color: #fff; text-align: center; margin-top: 15px; text-decoration: none; display: block; transition: 0.3s color; }
        #form_user a:hover { color: #bd2a65; }
        @media (max-width: 600px) { #form_user { padding: 30px 20px; } }
    </style>
</head>
  <body>
    <div id="navbar"><%- include('../../features/index') %></div>
      <div id="register">
        <h1>Registrar</h1>
        <form id="form_user" enctype="multipart/form-data">
            <div class="file-input-container">
                <label for="photo_user" class="file-input-label" id="fileLabel">Selecione uma foto</label>
                <!-- Corrigido o name para photo_user -->
                <input type="file" id="photo_user" name="photo_user" accept="image/*" required>
            </div>
            <input type="text" id="name" name="name" placeholder="Name" required>
            <input type="text" id="email" name="email" placeholder="Email" required>
            <input type="text" id="phone" name="phone" placeholder="Telefone">
            <input type="text" id="address" name="address" placeholder="Endereço">
            <input type="text" id="cpf" name="cpf" placeholder="CPF" required>
            <input type="date" id="birth" name="dt_birth" placeholder="Birth" required>
            <input type="password" id="password" name="password" placeholder="Insira sua senha..." required>
            <input type="password" id="password2" name="password2" placeholder="Reinsira sua senha..." required>
            <button type="submit">Registrar</button>
            <a href="/login">Já tem uma conta?</a>
        </form>        
    </div>
  </body>
</html>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  // Atualiza o rótulo do botão de upload
  document.getElementById('photo_user').addEventListener('change', function() {
    document.getElementById('fileLabel').textContent = this.files[0]?.name || 'Selecione uma foto';
  });

  // Função única de validação e envio
  async function validateForm(event) {
    event.preventDefault();

    const form = document.getElementById('form_user');
    const btn  = form.querySelector('button');
    btn.disabled = true;
    btn.textContent = 'Registrando...';

    const formData = new FormData(form);
    const name     = (formData.get('name') || '').trim();
    const email    = (formData.get('email') || '').trim();
    const phone    = (formData.get('phone') || '').trim();
    const address  = (formData.get('address') || '').trim();
    const cpf      = (formData.get('cpf') || '').trim();
    const birth    = formData.get('dt_birth');
    const pwd      = formData.get('password') || '';
    const pwd2     = formData.get('password2') || '';
    const photo    = formData.get('photo_user');

    const errors = [];

    // 1) foto
    if (!(photo instanceof File) || !photo.type.startsWith('image/')) {
      errors.push('Selecione uma imagem válida.');
    }
    // 2) nome
    if (name.length < 3 || !/^[A-Za-zÀ-ú\s]+$/.test(name)) {
      errors.push('Nome inválido (mínimo 3 letras).');
    }
    // 3) CPF
    if (!/^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(cpf)) {
      errors.push('Formato de CPF inválido.');
    }
    // 4) email
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      errors.push('Formato de e-mail inválido.');
    }
    // 5) idade ≥18
    const dBirth = new Date(birth);
    if (isNaN(dBirth.getTime())) {
      errors.push('Data de nascimento inválida.');
    } else {
      const diff = Date.now() - dBirth.getTime();
      const age  = new Date(diff).getUTCFullYear() - 1970;
      if (age < 18) {
        errors.push('Você precisa ter pelo menos 18 anos.');
      }
    }
    // 6) telefone
    if (phone.replace(/\D/g, '').length < 10) {
      errors.push('Telefone deve ter ao menos 10 dígitos.');
    }
    // 7) endereço (opcional)
    if (address && address.length < 5) {
      errors.push('Endereço muito curto (mínimo 5 caracteres).');
    }
    // 8) senha
    if (pwd.length < 8) {
      errors.push('Senha deve ter pelo menos 8 caracteres.');
    }
    if (pwd !== pwd2) {
      errors.push('As senhas não coincidem.');
    }

    if (errors.length) {
      await Swal.fire({
        icon: 'error',
        title: 'Erros encontrados:',
        html: errors.join('<br>')
      });
      btn.disabled = false;
      btn.textContent = 'Registrar';
      return;
    }

    // envio ao servidor
    try {
      const response = await fetch('/register_user', {
        method: 'POST',
        body: formData
      });
      const result = await response.json();

      if (!response.ok) {
        // usa o erro que veio do back-end
        throw new Error(result.error || 'Falha inesperada no servidor.');
      }

      await Swal.fire({
        icon: 'success',
        title: 'Cadastro realizado!',
        text: 'Redirecionando para login...'
      });
      window.location.href = '/login';

    } catch (err) {
      console.error('Erro no cadastro:', err);
      await Swal.fire({
        icon: 'error',
        title: 'Erro no cadastro',
        text: err.message || 'Erro desconhecido.'
      });
    } finally {
      btn.disabled = false;
      btn.textContent = 'Registrar';
    }
  }

  document.getElementById('form_user')
    .addEventListener('submit', validateForm);
</script>